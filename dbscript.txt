-- 1. Setup for the authentication in supabase for user management
-- 2. Run the script below
--Assignment Table
create table
  public.assignment (
    classroom_id uuid null,
    title text not null,
    "desc" text not null,
    instruc text not null,
    file text not null,
    start_date timestamp without time zone not null,
    end_date timestamp without time zone not null,
    created_at timestamp with time zone not null default now(),
    assign_id uuid not null default gen_random_uuid (),
    is_released boolean null default false,
    constraint assignment_pkey primary key (assign_id),
    constraint assignment_classroom_id_fkey foreign key (classroom_id) references classroom (classroom_id) on update cascade on delete cascade
  ) tablespace pg_default;

--Classroom table
create table
  public.classroom (
    classroom_id uuid not null default gen_random_uuid (),
    inst_id text not null,
    academic_year text not null,
    semester smallint not null,
    course_name text not null,
    course_code text not null,
    course_desc text not null,
    created_at timestamp without time zone not null default now(),
    classroom_limit integer not null,
    current_enrolment integer null,
    constraint classroom_pkey primary key (classroom_id),
    constraint public_classroom_inst_id_fkey foreign key (inst_id) references instructor (inst_id)
  ) tablespace pg_default;

--enrol table
create table
  public.enrol (
    enrol_id uuid not null default gen_random_uuid (),
    classroom_id uuid not null,
    created_at timestamp without time zone not null default now(),
    stud_id text not null,
    constraint enrol_pkey primary key (enrol_id),
    constraint public_enrol_classroom_id_fkey foreign key (classroom_id) references classroom (classroom_id) on update cascade on delete cascade,
    constraint public_enrol_stud_id_fkey foreign key (stud_id) references student (stud_id) on update cascade on delete cascade
  ) tablespace pg_default;

--feedbacktext table
create table
  public.feedbacktext (
    ft_id bigint generated by default as identity,
    sub_id uuid not null default gen_random_uuid (),
    feedback json null,
    created_at timestamp with time zone not null default now(),
    constraint feedbacktext_pkey primary key (ft_id),
    constraint public_feedbacktext_sub_id_fkey foreign key (sub_id) references submission (sub_id) on update cascade on delete cascade
  ) tablespace pg_default;

--grading table
create table
  public.grading (
    id bigint generated by default as identity,
    sub_id uuid not null,
    gr_id uuid not null,
    created_at timestamp with time zone not null default now(),
    mark_earned integer null,
    constraint grading_pkey primary key (id),
    constraint unique_sub_gr unique (sub_id, gr_id),
    constraint public_grading_gr_id_fkey foreign key (gr_id) references gradingrubric (gr_id),
    constraint public_grading_sub_id_fkey foreign key (sub_id) references submission (sub_id) on update cascade on delete cascade
  ) tablespace pg_default;

// gradingrubric table
create table
  public.gradingrubric (
    assign_id uuid not null default gen_random_uuid (),
    created_at timestamp with time zone not null default now(),
    question text null,
    mark_possible integer null,
    description text null,
    gr_id uuid not null default gen_random_uuid (),
    constraint gradingrubric_pkey primary key (gr_id),
    constraint public_gradingrubric_assign_id_fkey foreign key (assign_id) references assignment (assign_id) on update cascade on delete cascade
  ) tablespace pg_default;

--instructor table
create table
  public.instructor (
    id uuid not null default auth.uid (),
    created_at timestamp with time zone not null default now(),
    inst_id text not null,
    inst_fname text not null,
    inst_lname text not null,
    inst_gender text not null,
    inst_email text not null,
    inst_password text not null,
    constraint instructor_pkey primary key (inst_id),
    constraint instructor_inst_id_key unique (inst_id),
    constraint public_instructor_id_fkey foreign key (id) references auth.users (id) on update cascade on delete cascade
  ) tablespace pg_default;

--student table
create table
  public.student (
    stud_id text not null,
    id uuid not null default auth.uid (),
    stud_fname text not null,
    stud_lname text not null,
    stud_gender text not null,
    stud_email text not null,
    stud_password text not null,
    created_at timestamp with time zone not null default now(),
    constraint student_pkey primary key (stud_id),
    constraint student_id_key unique (id),
    constraint student_stud_id_key unique (stud_id),
    constraint public_student_id_fkey foreign key (id) references auth.users (id) on update cascade on delete cascade
  ) tablespace pg_default;

--submission table
create table
  public.submission (
    sub_id uuid not null default gen_random_uuid (),
    assign_id uuid not null,
    enrol_id uuid not null,
    spelling double precision null,
    grammar double precision null,
    file text not null,
    mark integer null,
    created_at timestamp with time zone not null default now(),
    constraint submission_pkey primary key (sub_id),
    constraint public_submission_enrol_id_fkey foreign key (enrol_id) references enrol (enrol_id) on update cascade on delete cascade,
    constraint submission_assign_id_fkey foreign key (assign_id) references assignment (assign_id) on update cascade on delete cascade
  ) tablespace pg_default;

--3. To store PDF/images, storage and bucket need to be setup
https://supabase.com/docs/guides/storage/quickstart?queryGroups=database-method&database-method=sql&queryGroups=language&language=dashboard 
